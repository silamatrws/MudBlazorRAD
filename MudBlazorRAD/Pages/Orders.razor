@page "/orders"
@using System.Net.Http.Json

@inject HttpClient httpClient


<div class="container p-xl-5 p-lg-4 p-md-3 p-sm-2 ">
    <div class="card p-1 shadow">

        <MudDataGrid T="Order" MultiSelection="true" Items="@orders" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                     Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Orders</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                @*         <SelectColumn T="Order" />
                *@        <PropertyColumn Property="x => x.Name" Title="Name" Sortable="false" Filterable="false" />
                <PropertyColumn Property="x => x.Date" />
                <PropertyColumn Property="x => x.Phone" SortBy="@_sortBy" />
                <PropertyColumn Property="x => x.Email" />
                <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
                <PropertyColumn Property="x => x.OrderNumber" Title="Order Number" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Order" />
            </PagerContent>
        </MudDataGrid>



        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
        </div>

        @* <MudExpansionPanels Style="flex:1">
            <MudExpansionPanel Text="Show Events">
                @foreach (var message in _events)
                {
                    <MudText Typo="@Typo.body2">@message</MudText>
                }
                @if (_events.Count > 0)
                {
                    <div class="d-flex">
                        <MudSpacer />
                        <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                    </div>
                }
            </MudExpansionPanel>
        </MudExpansionPanels> *@
    </div>
</div>

@code {

    private IEnumerable<Order> orders;

    public class Order
    {


        public DateOnly Date { get; set; }

        public string? Name { get; set; }

        public string? Email { get; set; }

        public string? Phone { get; set; }

        public string? OrderNumber { get; set; }

        public int Quantity { get; set; }

    }


    //private IEnumerable<Element> Elements = new List<Element>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    // private Func<Element, object> _sortBy => x =>
    // {
    //     if (_sortNameByLength)
    //         return x.Name.Length;
    //     else
    //         return x.Name;
    // };


    private Func<Order, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };


    // quick filter - filter globally across multiple columns with the same input
    // private Func<Element, bool> _quickFilter => x =>
    // {
    //     if (string.IsNullOrWhiteSpace(_searchString))
    //         return true;

    //     if (x.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //         return true;

    //     if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //         return true;

    //     if ($"{x.Number} {x.Position} {x.Molar}".Contains(_searchString))
    //         return true;

    //     return false;
    // };


    private Func<Order, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.OrderNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Phone} {x.Email}".Contains(_searchString))
            return true;

        return false;
    };


    protected override async Task OnInitializedAsync()
    {
        ///Elements = await httpClient.GetFromJsonAsync<List<Element>>("sample-data/periodic.json");

        orders = await httpClient.GetFromJsonAsync<IEnumerable<Order>>("sample-data/neworders.json");

    }

    // // events
    // void RowClicked(DataGridRowClickEventArgs<Element> args)
    // {
    //     _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    // }


    void RowClicked(DataGridRowClickEventArgs<Order> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }
    
    // void RowRightClicked(DataGridRowClickEventArgs<Element> args)
    // {
    //     _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    // }

     void RowRightClicked(DataGridRowClickEventArgs<Order> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }




    void SelectedItemsChanged(HashSet<Order> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    // void SelectedItemsChanged(HashSet<Element> items)
    // {
    //     _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    // }
}